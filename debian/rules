#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work ??.
export DH_OPTIONS

DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_HOST_ARCH       ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)

PKGVERSION      := $(shell dpkg-parsechangelog | grep ^Version:.* | cut -d ' ' -f 2)
APPVERSION      := $(shell echo $(PKGVERSION) | cut -d '-' -f 1 | cut -d ':' -f 2 )

configopts =
optimize_add =

debug:=n
logging:=n
tests:=n

CFLAGS = 
CXXFLAGS =

ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
debug:=y
else
debug:=$(debug)
endif

ifneq (,$(findstring logging,$(DEB_BUILD_OPTIONS)))
logging:=y
else
logging:=$(logging)
endif

ifneq (,$(findstring tests,$(DEB_BUILD_OPTIONS)))
tests:=y
else
tests:=$(tests)
endif

ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif

ifneq (,$(findstring $(DEB_HOST_ARCH),arm armel))
	configopts += --enable-armregs=yes
else
	configopts += --enable-armregs=no
endif

ifeq ($(tests),y)
	configopts += --enable-tests=yes
else
	configopts += --enable-tests=no
endif

ifeq ($(logging),y)
	configopts += --enable-logging
else
	configopts += --disable-logging
endif

ifeq ($(debug),y)
	optimize_add += -O0 -ggdb
	configopts += --enable-debug=yes
else
	optimize_add += -O2 -g
	configopts += --enable-debug=no
endif


ifeq (,$(findstring cflagsopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS = -Wall
ifeq (,$(findstring $(DEB_HOST_ARCH),arm armel))
	CFLAGS += -Werror
endif
	CFLAGS += $(optimize_add)
	CXXFLAGS += $(CFLAGS)
endif


config.status: configure
	dh_testdir
	# Add here commands to configure the package
configure: configure-stamp
configure-stamp:
	dh_testdir

	./autogen.sh --prefix=/usr
	CUSTOM_VERSION="$(APPVERSION)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" ./configure --host=$(DEB_HOST_GNU_TYPE) --build=$(DEB_BUILD_GNU_TYPE) --prefix=/usr --mandir=\$${prefix}/share/man --infodir=\$${prefix}/share/info --bindir=\$${prefix}/bin --sbindir=\$${prefix}/sbin $(configopts)

	touch configure-stamp


build: build-stamp

build-stamp: configure-stamp 
	dh_testdir

	# Add here commands to compile the package.
	$(MAKE)

	touch $@

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp

	# Add here commands to clean up after the build process.
	[ ! -f Makefile ] || $(MAKE) clean
	[ ! -f Makefile ] || $(MAKE) distclean
	dh_clean 

install: build
	dh_testdir
	dh_testroot
	dh_clean -k 
	dh_installdirs --all

	# Add here commands to install the package into debian/package.
	$(MAKE) -C $(CURDIR)/scripts DESTDIR=$(CURDIR)/debian/sp-rich-core install
	$(MAKE) -C $(CURDIR)/core-reducer DESTDIR=$(CURDIR)/debian/core-reducer install
	$(MAKE) -C $(CURDIR)/rich-core-extract DESTDIR=$(CURDIR)/debian/sp-rich-core-postproc install
	$(MAKE) -C $(CURDIR)/tests DESTDIR=$(CURDIR)/debian/sp-rich-core-tests install



# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installchangelogs 
	dh_installdocs
	dh_installinfo
	dh_installman --all
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	dh_makeshlibs -V
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol -- -v$(PKGVERSION)$(VERSUFFIX)
	dh_md5sums
	dh_builddeb
	aegis-deb-util --add-manifest sp-rich-core

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure

